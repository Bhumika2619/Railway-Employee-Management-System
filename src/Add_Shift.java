/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author patil
 */
import java.sql.*;
import javax.swing.*;               
import java.text.ParseException;       // For handling date parsing errors
import java.text.SimpleDateFormat;     // For date parsing
import javax.swing.JOptionPane;   

public class Add_Shift extends javax.swing.JFrame {

    /**
     * Creates new form Add_Shift
     */
    public Add_Shift() {
        initComponents();
         setDefaultCloseOperation(Add_Shift.DISPOSE_ON_CLOSE);
         
         update.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateActionPerformed(evt);
    }
});
         
         delete.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteActionPerformed(evt);
    }
});


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shiftid = new javax.swing.JButton();
        shifttime = new javax.swing.JButton();
        date = new javax.swing.JButton();
        empid = new javax.swing.JButton();
        t1 = new javax.swing.JTextField();
        t2 = new javax.swing.JTextField();
        t3 = new javax.swing.JTextField();
        t4 = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        shiftid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        shiftid.setText("SHIFT ID");

        shifttime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        shifttime.setText("SHIFT TIME");

        date.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        date.setText("DATE");

        empid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empid.setText("EMP ID");

        add.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        add.setText("ADD");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancel.setText("CANCEL");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(shifttime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(shiftid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(empid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(124, 124, 124)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t1)
                    .addComponent(t2)
                    .addComponent(t3)
                    .addComponent(t4, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(add)
                .addGap(18, 18, 18)
                .addComponent(update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(delete)
                .addGap(44, 44, 44)
                .addComponent(cancel)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t1)
                    .addComponent(shiftid, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t2)
                    .addComponent(shifttime, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t3, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(empid, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(t4))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delete)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        String url = "jdbc:mysql://localhost/railway";
String user = "root";
String pwd = "123456";

try {
    // 1. Get all input from text fields
    String shiftTime = t2.getText().trim(); // e.g., Morning(6 AM - 2 PM)
    String dateStr = t3.getText().trim();   // Format: yyyy-MM-dd
    String empIdStr = t4.getText().trim();

    // 2. Validate and convert inputs
    if (shiftTime.isEmpty() || dateStr.isEmpty() || empIdStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.");
        return;
    }

    // Parse date
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    sdf.setLenient(false); // Strict date parsing
    java.util.Date utilDate = sdf.parse(dateStr);
    java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());

    int empId = Integer.parseInt(empIdStr); // Parse EMP_ID to int

    // 3. Connect to database
    Connection conn = DriverManager.getConnection(url, user, pwd);

    // 4. Check if shift already exists for this EMP_ID and DATE
    String checkQuery = "SELECT * FROM shift WHERE SHIFT_TIME = ? AND DATE = ? AND EMP_ID = ?";
    PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
    checkStmt.setString(1, shiftTime);
    checkStmt.setDate(2, sqlDate);
    checkStmt.setInt(3, empId);
    ResultSet rs = checkStmt.executeQuery();

    if (rs.next()) {
        JOptionPane.showMessageDialog(this, "Shift already exists for this employee on this date.");
    } else {
        // 5. Insert new shift
        String insertQuery = "INSERT INTO shift (SHIFT_TIME, DATE, EMP_ID) VALUES (?, ?, ?)";
        PreparedStatement insertStmt = conn.prepareStatement(insertQuery);
        insertStmt.setString(1, shiftTime);
        insertStmt.setDate(2, sqlDate);
        insertStmt.setInt(3, empId);

        insertStmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Shift added successfully.");
        insertStmt.close();
    }

    // 6. Clean up
    rs.close();
    checkStmt.close();
    conn.close();

    // 7. Clear input fields
    t1.setText(""); // Optional: If showing SHIFT_ID
    t2.setText("");
    t3.setText("");
    t4.setText("");

} catch (ParseException pe) {
    JOptionPane.showMessageDialog(this, "Invalid date format.\nUse: yyyy-MM-dd");
} catch (NumberFormatException nfe) {
    JOptionPane.showMessageDialog(this, "Employee ID must be a number.");
} catch (SQLException sqle) {
    JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
    e.printStackTrace();
}

    }//GEN-LAST:event_addActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        
    String url = "jdbc:mysql://localhost/railway";
    String user = "root";
    String pwd = "123456";

    try {
        // Get all inputs
        String shiftIdStr = t1.getText().trim();
        String shiftTime = t2.getText().trim();
        String dateStr = t3.getText().trim(); // yyyy-MM-dd
        String empIdStr = t4.getText().trim();

        // Validate input
        if (shiftIdStr.isEmpty() || shiftTime.isEmpty() || dateStr.isEmpty() || empIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

        int shiftId = Integer.parseInt(shiftIdStr);
        int empId = Integer.parseInt(empIdStr);

        // Convert date
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);
        java.util.Date utilDate = sdf.parse(dateStr);
        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());

        // Connect to DB
        Connection conn = DriverManager.getConnection(url, user, pwd);

        // Check if shift with SHIFT_ID exists
        String checkQuery = "SELECT * FROM shift WHERE SHIFT_ID = ?";
        PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
        checkStmt.setInt(1, shiftId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "No shift found with SHIFT_ID: " + shiftId);
        } else {
            // Update shift
            String updateQuery = "UPDATE shift SET SHIFT_TIME = ?, DATE = ?, EMP_ID = ? WHERE SHIFT_ID = ?";
            PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
            updateStmt.setString(1, shiftTime);
            updateStmt.setDate(2, sqlDate);
            updateStmt.setInt(3, empId);
            updateStmt.setInt(4, shiftId);

            int rows = updateStmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Shift updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Update failed.");
            }

            updateStmt.close();
        }

        // Clean up
        rs.close();
        checkStmt.close();
        conn.close();

        // Clear fields
        t1.setText("");
        t2.setText("");
        t3.setText("");
        t4.setText("");

    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "SHIFT_ID and EMP_ID must be valid numbers.");
    } catch (ParseException pe) {
        JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd.");
    } catch (SQLException sqle) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
        sqle.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
     
    String url = "jdbc:mysql://localhost/railway";
    String user = "root";
    String pwd = "123456";

    try {
        String shiftIdStr = t1.getText().trim();

        if (shiftIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter SHIFT_ID to delete.");
            return;
        }

        int shiftId = Integer.parseInt(shiftIdStr);

        // Confirm before deleting
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete shift ID " + shiftId + "?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // User cancelled
        }

        Connection conn = DriverManager.getConnection(url, user, pwd);

        // Check if record exists
        String checkQuery = "SELECT * FROM shift WHERE SHIFT_ID = ?";
        PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
        checkStmt.setInt(1, shiftId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "No shift found with SHIFT_ID: " + shiftId);
        } else {
            // Perform deletion
            String deleteQuery = "DELETE FROM shift WHERE SHIFT_ID = ?";
            PreparedStatement deleteStmt = conn.prepareStatement(deleteQuery);
            deleteStmt.setInt(1, shiftId);

            int rows = deleteStmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Shift deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Deletion failed.");
            }

            deleteStmt.close();
        }

        rs.close();
        checkStmt.close();
        conn.close();

        // Clear fields
        t1.setText("");
        t2.setText("");
        t3.setText("");
        t4.setText("");

    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "SHIFT_ID must be a valid number.");
    } catch (SQLException sqle) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
        sqle.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_Shift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_Shift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_Shift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_Shift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_Shift().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton cancel;
    private javax.swing.JButton date;
    private javax.swing.JButton delete;
    private javax.swing.JButton empid;
    private javax.swing.JButton shiftid;
    private javax.swing.JButton shifttime;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTextField t4;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
