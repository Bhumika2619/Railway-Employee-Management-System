/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author patil
 */
import java.sql.*;
import javax.swing.*;               
import java.text.ParseException;       // For handling date parsing errors
import java.text.SimpleDateFormat;     // For date parsing
import javax.swing.JOptionPane;   

public class Add_Train extends javax.swing.JFrame {

    /**
     * Creates new form Add_Train
     */
    public Add_Train() {
        initComponents();
        setDefaultCloseOperation(Add_Train.DISPOSE_ON_CLOSE);
        
        update.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
update.setText("UPDATE");
update.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateActionPerformed(evt);
    }
});

delete.setText("DELETE");

delete.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteActionPerformed(evt);
    }
});


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainid = new javax.swing.JButton();
        trainname = new javax.swing.JButton();
        source = new javax.swing.JButton();
        destination = new javax.swing.JButton();
        schedule = new javax.swing.JButton();
        adddetails = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        t1 = new javax.swing.JTextField();
        t2 = new javax.swing.JTextField();
        t3 = new javax.swing.JTextField();
        t4 = new javax.swing.JTextField();
        t5 = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        trainid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        trainid.setText("TRAIN ID");

        trainname.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        trainname.setText("TRAIN NAME");

        source.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        source.setText("SOURCE");

        destination.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        destination.setText("DESTINATION");
        destination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationActionPerformed(evt);
            }
        });

        schedule.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        schedule.setText("SCHEDULE");

        adddetails.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        adddetails.setText("ADD DETAILS");
        adddetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adddetailsActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancel.setText("CANCEL");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(adddetails))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(destination, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(trainid, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(schedule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(trainname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t4)
                            .addComponent(t5)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t2)
                            .addComponent(t3))
                        .addGap(193, 193, 193))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(adddetails, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trainid)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trainname)
                            .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(source)
                            .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(destination)
                            .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(schedule)
                            .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(100, 100, 100)))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void destinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destinationActionPerformed

    private void adddetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adddetailsActionPerformed
        // TODO add your handling code here:
        String url = "jdbc:mysql://localhost/railway";
String user = "root";
String pwd = "123456";

try {
    // 1. Get all input from text fields
    String trainName = t2.getText().trim();
    String source = t3.getText().trim();
    String destination = t4.getText().trim();
    String scheduleStr = t5.getText().trim(); // yyyy-MM-dd HH:mm:ss

    // 2. Convert schedule string to java.sql.Timestamp
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    sdf.setLenient(false); // Strict format check
    java.util.Date utilDate = sdf.parse(scheduleStr);
    java.sql.Timestamp sqlSchedule = new java.sql.Timestamp(utilDate.getTime());
    

    // 3. Connect to database
    Connection conn = DriverManager.getConnection(url, user, pwd);

    // 4. Check if train already exists (based on TRAIN_NAME + SCHEDULE)
    String checkQuery = "SELECT * FROM train WHERE TRAIN_NAME = ? AND SCHEDULE = ?";
    PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
    checkStmt.setString(1, trainName);
    checkStmt.setTimestamp(2, sqlSchedule);
    ResultSet rs = checkStmt.executeQuery();

    if (rs.next()) {
        JOptionPane.showMessageDialog(this, "Train with this name and schedule already exists.");
    } else {
        // 5. Insert new train
        String insertQuery = "INSERT INTO train (TRAIN_NAME, SOURCE, DESTINATION, SCHEDULE)" + "VALUES (?, ?, ?, ?)";
        PreparedStatement insertStmt = conn.prepareStatement(insertQuery);
        insertStmt.setString(1, trainName);
        insertStmt.setString(2, source);
        insertStmt.setString(3, destination);
        insertStmt.setTimestamp(4, sqlSchedule);

        insertStmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Train added successfully.");
        insertStmt.close();
    }

    // 6. Clean up
    rs.close();
    checkStmt.close();
    conn.close();

    // 7. Clear text fields
    t1.setText(""); // optional if you're showing TRAIN_ID
    t2.setText("");
    t3.setText("");
    t4.setText("");
    t5.setText("");

} catch (ParseException pe) {
    JOptionPane.showMessageDialog(this, "Invalid date format.\nUse: yyyy-MM-dd HH:mm:ss");
} catch (SQLException sqle) {
    JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
    e.printStackTrace();
}

    }//GEN-LAST:event_adddetailsActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
      
    String url = "jdbc:mysql://localhost/railway";
    String user = "root";
    String pwd = "123456";

    try {
        // 1. Get all input from text fields
        int trainId = Integer.parseInt(t1.getText().trim());
        String trainName = t2.getText().trim();
        String source = t3.getText().trim();
        String destination = t4.getText().trim();
        String scheduleStr = t5.getText().trim(); // yyyy-MM-dd HH:mm:ss

        // 2. Convert string to java.sql.Timestamp
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        sdf.setLenient(false); // Enforce format
        java.util.Date utilDate = sdf.parse(scheduleStr);
        java.sql.Timestamp sqlSchedule = new java.sql.Timestamp(utilDate.getTime());

        // 3. Connect to DB
        Connection conn = DriverManager.getConnection(url, user, pwd);

        // 4. Check if record exists
        String checkQuery = "SELECT * FROM train WHERE TRAIN_ID = ?";
        PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
        checkStmt.setInt(1, trainId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "No train found with TRAIN_ID: " + trainId);
        } else {
            // 5. Perform update
            String updateQuery = "UPDATE train SET TRAIN_NAME = ?, SOURCE = ?, DESTINATION = ?, SCHEDULE = ? WHERE TRAIN_ID = ?";
            PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
            updateStmt.setString(1, trainName);
            updateStmt.setString(2, source);
            updateStmt.setString(3, destination);
            updateStmt.setTimestamp(4, sqlSchedule);
            updateStmt.setInt(5, trainId);

            int rowsAffected = updateStmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Train updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update train.");
            }

            updateStmt.close();
        }

        // Cleanup
        rs.close();
        checkStmt.close();
        conn.close();

        // Clear form
        t1.setText("");
        t2.setText("");
        t3.setText("");
        t4.setText("");
        t5.setText("");

    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "TRAIN_ID must be a valid number.");
    } catch (ParseException pe) {
        JOptionPane.showMessageDialog(this, "Invalid schedule format.\nUse: yyyy-MM-dd HH:mm:ss");
    } catch (SQLException sqle) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
        sqle.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Unexpected Error: " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
       
    String url = "jdbc:mysql://localhost/railway";
    String user = "root";
    String pwd = "123456";

    try {
        // Get TRAIN_ID from the text field
        String idText = t1.getText().trim();
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter TRAIN_ID to delete.");
            return;
        }

        int trainId = Integer.parseInt(idText);

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the train with ID: " + trainId + "?",
                "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return; // User canceled
        }

        // Connect to database
        Connection conn = DriverManager.getConnection(url, user, pwd);

        // Check if the train exists
        String checkQuery = "SELECT * FROM train WHERE TRAIN_ID = ?";
        PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
        checkStmt.setInt(1, trainId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "No train found with TRAIN_ID: " + trainId);
        } else {
            // Delete the train
            String deleteQuery = "DELETE FROM train WHERE TRAIN_ID = ?";
            PreparedStatement deleteStmt = conn.prepareStatement(deleteQuery);
            deleteStmt.setInt(1, trainId);

            int rowsAffected = deleteStmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Train deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete train.");
            }

            deleteStmt.close();
        }

        // Clean up
        rs.close();
        checkStmt.close();
        conn.close();

        // Clear input fields
        t1.setText("");
        t2.setText("");
        t3.setText("");
        t4.setText("");
        t5.setText("");

    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "TRAIN_ID must be a valid number.");
    } catch (SQLException sqle) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
        sqle.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_Train.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_Train.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_Train.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_Train.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_Train().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adddetails;
    private javax.swing.JButton cancel;
    private javax.swing.JButton delete;
    private javax.swing.JButton destination;
    private javax.swing.JButton schedule;
    private javax.swing.JButton source;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTextField t4;
    private javax.swing.JTextField t5;
    private javax.swing.JButton trainid;
    private javax.swing.JButton trainname;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
