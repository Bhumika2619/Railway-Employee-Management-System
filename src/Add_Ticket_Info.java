/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author patil
 */
import java.sql.*;
import javax.swing.*;               
import java.text.ParseException;       // For handling date parsing errors
import java.text.SimpleDateFormat;     // For date parsing
import javax.swing.JOptionPane;        // For showing message dialogs

public class Add_Ticket_Info extends javax.swing.JFrame {

    /**
     * Creates new form Add_Ticket_Info
     */
    public Add_Ticket_Info() {
        initComponents();
          setDefaultCloseOperation(Add_Ticket_Info.DISPOSE_ON_CLOSE);
          
          update.setText("UPDATE");

          update.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateActionPerformed(evt);
    }
});
          delete.setText("DELETE");

          delete.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteActionPerformed(evt);
    }
});


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        ticid = new javax.swing.JButton();
        passengername = new javax.swing.JButton();
        seatno = new javax.swing.JButton();
        price = new javax.swing.JButton();
        dateoftravel = new javax.swing.JButton();
        trainid = new javax.swing.JButton();
        add = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        t1 = new javax.swing.JTextField();
        t2 = new javax.swing.JTextField();
        t3 = new javax.swing.JTextField();
        t4 = new javax.swing.JTextField();
        t5 = new javax.swing.JTextField();
        t6 = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ticid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ticid.setText("TIC ID");

        passengername.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passengername.setText("PASSENGER NAME");

        seatno.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        seatno.setText("SEAT NO");

        price.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        price.setText("PRICE");

        dateoftravel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dateoftravel.setText("DATE OF TRAVEL");

        trainid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        trainid.setText("TRAIN ID");

        add.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        add.setText("ADD");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancel.setText("CANCEL");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(passengername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ticid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seatno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(price, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateoftravel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(trainid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(update)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(t1)
                            .addComponent(t2)
                            .addComponent(t3)
                            .addComponent(t4)
                            .addComponent(t5)
                            .addComponent(t6, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t1)
                    .addComponent(ticid, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t2)
                    .addComponent(passengername, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t3)
                    .addComponent(seatno, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t4)
                    .addComponent(price, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t5)
                    .addComponent(dateoftravel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(trainid, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(t6))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
               String url = "jdbc:mysql://localhost/railway";
String user = "root";
String pwd = "123456";

try {
    // 1. Get all input
    String passengername = t2.getText().trim();
    String seatno = t3.getText().trim();
    double price = Double.parseDouble(t4.getText().trim());
    String dateoftravelStr = t5.getText().trim(); // yyyy-MM-dd
    int trainid = Integer.parseInt(t6.getText().trim());

    // 2. Convert hire date
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    java.util.Date utilDate = sdf.parse(dateoftravelStr);
    java.sql.Date sqlDateOfTravel = new java.sql.Date(utilDate.getTime());

    // 3. Connection
    Connection conn = DriverManager.getConnection(url, user, pwd);
    
    
    // 4. 
    String checkQuery = "SELECT * FROM ticket WHERE PASSENGER_NAME = ? AND DATE_OF_TRAVEL=? ";
    PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
    checkStmt.setString(1, passengername);
    checkStmt.setDate(2, sqlDateOfTravel);
    ResultSet rs = checkStmt.executeQuery();

    if (rs.next()) {
        JOptionPane.showMessageDialog(this, "Ticket with this Passsenger Name and Date Of Travel  already exists.");
    } else {
        // 5. Insert new ticket (auto TIC_ID)
        String insertQuery = "INSERT INTO ticket  (PASSENGER_NAME, SEAT_NO, PRICE, DATE_OF_TRAVEL, TRAIN_ID) "
                           + "VALUES (?, ?, ?, ?, ?)";
        PreparedStatement insertStmt = conn.prepareStatement(insertQuery);
        insertStmt.setString(1, passengername);
        insertStmt.setString(2, seatno);
        insertStmt.setDouble(3, price);
        insertStmt.setDate(4, sqlDateOfTravel);
        insertStmt.setInt(5,trainid);
       

        insertStmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Ticket added successfully.");
        insertStmt.close();
    }

    // Cleanup
    rs.close();
    checkStmt.close();
    conn.close();

    // Clear fields
    t1.setText(""); // optional if you're showing TIC_ID
    t2.setText(""); t3.setText(""); t4.setText(""); t5.setText("");
    t6.setText("");

} catch (ParseException pe) {
    JOptionPane.showMessageDialog(this, "Invalid date format (use yyyy-MM-dd).");
} catch (NumberFormatException nfe) {
    JOptionPane.showMessageDialog(this, "Invalid number format.");
} catch (SQLException sqle) {
    JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    e.printStackTrace();
}
 
    }//GEN-LAST:event_addActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        
    String url = "jdbc:mysql://localhost/railway";
    String user = "root";
    String pwd = "123456";

    try {
        // 1. Get all input values
        String ticIdStr = t1.getText().trim();
        if (ticIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the TIC_ID to update.");
            return;
        }

        int ticId = Integer.parseInt(ticIdStr);
        String passengerName = t2.getText().trim();
        String seatNo = t3.getText().trim();
        double ticketPrice = Double.parseDouble(t4.getText().trim());
        String dateOfTravelStr = t5.getText().trim();
        int trainId = Integer.parseInt(t6.getText().trim());

        // 2. Parse the date
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date utilDate = sdf.parse(dateOfTravelStr);
        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());

        // 3. Connect to database
        Connection conn = DriverManager.getConnection(url, user, pwd);

        // 4. Check if ticket exists
        String checkQuery = "SELECT * FROM ticket WHERE TIC_ID = ?";
        PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
        checkStmt.setInt(1, ticId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "No ticket found with TIC_ID: " + ticId);
        } else {
            // 5. Perform update
            String updateQuery = "UPDATE ticket SET PASSENGER_NAME = ?, SEAT_NO = ?, PRICE = ?, DATE_OF_TRAVEL = ?, TRAIN_ID = ? WHERE TIC_ID = ?";
            PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
            updateStmt.setString(1, passengerName);
            updateStmt.setString(2, seatNo);
            updateStmt.setDouble(3, ticketPrice);
            updateStmt.setDate(4, sqlDate);
            updateStmt.setInt(5, trainId);
            updateStmt.setInt(6, ticId);

            int rowsUpdated = updateStmt.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Ticket updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Update failed.");
            }

            updateStmt.close();
        }

        rs.close();
        checkStmt.close();
        conn.close();

        // Clear input fields
        t1.setText(""); t2.setText(""); t3.setText(""); t4.setText(""); t5.setText(""); t6.setText("");

    } catch (ParseException pe) {
        JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd.");
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "Please enter valid numeric values for TIC_ID, PRICE, and TRAIN_ID.");
    } catch (SQLException sqle) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        
    String url = "jdbc:mysql://localhost/railway";
    String user = "root";
    String pwd = "123456";

    try {
        // 1. Get TIC_ID from text field
        String ticIdStr = t1.getText().trim();
        if (ticIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the TIC_ID to delete.");
            return;
        }

        int ticId = Integer.parseInt(ticIdStr);

        // 2. Ask for confirmation
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete ticket with TIC_ID: " + ticId + "?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);
        
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // 3. Connect to DB
        Connection conn = DriverManager.getConnection(url, user, pwd);

        // 4. Check if ticket exists
        String checkQuery = "SELECT * FROM ticket WHERE TIC_ID = ?";
        PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
        checkStmt.setInt(1, ticId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "No ticket found with TIC_ID: " + ticId);
        } else {
            // 5. Delete ticket
            String deleteQuery = "DELETE FROM ticket WHERE TIC_ID = ?";
            PreparedStatement deleteStmt = conn.prepareStatement(deleteQuery);
            deleteStmt.setInt(1, ticId);

            int rowsDeleted = deleteStmt.executeUpdate();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Ticket deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Delete failed.");
            }

            deleteStmt.close();
        }

        // Cleanup
        rs.close();
        checkStmt.close();
        conn.close();

        // Clear fields
        t1.setText(""); t2.setText(""); t3.setText(""); t4.setText(""); t5.setText(""); t6.setText("");

    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric TIC_ID.");
    } catch (SQLException sqle) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + sqle.getMessage());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_Ticket_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_Ticket_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_Ticket_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_Ticket_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_Ticket_Info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton cancel;
    private javax.swing.JButton dateoftravel;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton passengername;
    private javax.swing.JButton price;
    private javax.swing.JButton seatno;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTextField t4;
    private javax.swing.JTextField t5;
    private javax.swing.JTextField t6;
    private javax.swing.JButton ticid;
    private javax.swing.JButton trainid;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
